{
  "columnsSelection": {
    "mode": "ALL"
  },
  "explorationSampling": {
    "_refreshTrigger": 1,
    "selection": {
      "filter": {
        "uiData": {
          "mode": "\u0026\u0026",
          "conditions": [
            {
              "input": "ban2_postcode",
              "col": "jour",
              "string": "PLURI",
              "num": 0.0,
              "operator": "contains"
            }
          ]
        },
        "distinct": false,
        "enabled": false
      },
      "latestPartitionsN": 1,
      "maxRecords": 10000,
      "ordering": {
        "rules": [],
        "enabled": false
      },
      "withinFirstN": -1,
      "partitionSelectionMethod": "ALL",
      "maxStoredBytes": -1,
      "targetRatio": 0.02,
      "maxReadUncompressedBytes": -1,
      "samplingMethod": "HEAD_SEQUENTIAL"
    },
    "autoRefreshSample": false
  },
  "explorationFilters": [
    {
      "$$hashKey": "0RO",
      "type": "global_search"
    }
  ],
  "origin": "PREPARE_RECIPE",
  "exploreUIParams": {
    "autoRefresh": true
  },
  "steps": [
    {
      "preview": false,
      "metaType": "PROCESSOR",
      "disabled": false,
      "type": "PythonUDF",
      "params": {
        "mode": "ROW",
        "stopOnError": true,
        "pythonSourceCode": "def process(row):\n    if row[\"distance_commune_baac\"] is None or float(row[\"distance_commune_baac\"]) \u003e 2000:\n        row[\"baac_score\"] \u003d 0.0\n    elif row[\"long\"]:\n        row[\"baac_score\"] \u003d 1.0\n    if row[\"distance_commune_ban\"] is None or float(row[\"distance_commune_ban\"]) \u003e 1000:\n        row[\"ban_score\"] \u003d 0.0\n    if row[\"distance_commune_ban2\"] is None or float(row[\"distance_commune_ban2\"]) \u003e 1000:\n        row[\"ban2_score\"] \u003d 0.0\n    if row[\"distance_commune_bano\"] is None or float(row[\"distance_commune_bano\"]) \u003e 1000:\n        row[\"bano_score\"] \u003d 0.0\n    if row[\"pr_lon_i\"] and row[\"pr_lat_i\"]:\n        row[\"pr_score\"] \u003d 1.0\n    else:\n        row[\"pr_score\"] \u003d 0.0\n    return row",
        "usePythonUnicode": true
      },
      "alwaysShowComment": false
    },
    {
      "preview": false,
      "metaType": "PROCESSOR",
      "disabled": true,
      "type": "PythonUDF",
      "params": {
        "mode": "ROW",
        "stopOnError": true,
        "pythonSourceCode": "# Score minimal pour être pris en compte\nmin_score \u003d 0.5\n\n# commentaire de Francis : cette fonction n\u0027est pas appelée ?\ndef process(row):\n    baac_score \u003d float(row[\"baac_score\"]) if row[\"baac_score\"] else None\n    ban_score \u003d float(row[\"ban_score\"]) if row[\"ban_score\"] else None\n    bano_score \u003d float(row[\"bano_score\"]) if (row[\"bano_score\"] and row[\"bano_postcode\"] and row[\"bano_postcode\"][0:2].upper() \u003d\u003d row[\"dep\"]) else None\n    ban2_score \u003d float(row[\"ban2_score\"]) if row[\"ban2_score\"] and row[\"ban2_citycode\"] and row[\"ban2_citycode\"][0:2].upper() \u003d\u003d row[\"dep\"] else None\n    pr_score \u003d float(row[\"pr_score\"]) if row[\"pr_score\"] else None    \n    # Si on a des coordonnées saisies dès la BAAC\n    if row[\"long\"] and row[\"lat\"]:\n        # Si le score est bon, et qu’il s’agit d’un pas de porte,\n        # On préfère le résultat de la BAN\n        if ban_score \u003e 0.6 and row[\"ban_type\"] \u003d\u003d \"housenumber\":\n            row[\"longitude\"] \u003d row[\"ban_longitude\"]\n            row[\"latitude\"] \u003d row[\"ban_latitude\"]\n            row[\"geo_source\"] \u003d \"ban + citycode\"\n            row[\"geo_type\"] \u003d row[\"ban_type\"]\n            row[\"geo_score\"] \u003d row[\"ban_score\"]\n        # Sinon on préfère les coordonnées saisies\n        elif baac_score \u003e min_score:\n            row[\"longitude\"] \u003d row[\"long\"]\n            row[\"latitude\"] \u003d row[\"lat\"]\n            row[\"geo_source\"] \u003d \"baac\"\n            row[\"geo_type\"] \u003d \"unknown\"\n    # Pas de géocodage saisi dans la baac\n    elif pr_score \u003e 0.5:\n        #on a les coordonnées via les PR\n            row[\"longitude\"] \u003d row[\"pr_lon_i\"]\n            row[\"latitude\"] \u003d row[\"pr_lat_i\"]\n            row[\"geo_source\"] \u003d \"PR\"\n            row[\"geo_type\"] \u003d \"PR\"\n            row[\"geo_score\"] \u003d float(row[\"pr_score\"])\n    elif max(ban_score, bano_score, ban2_score) \u003e\u003d min_score:\n        if ban_score \u003e\u003d bano_score and ban_score \u003e\u003d ban2_score:\n            row[\"longitude\"] \u003d row[\"ban_longitude\"]\n            row[\"latitude\"] \u003d row[\"ban_latitude\"]\n            row[\"geo_source\"] \u003d \"ban + citycode\"\n            row[\"geo_type\"] \u003d row[\"ban_type\"]\n            row[\"geo_score\"] \u003d row[\"ban_score\"]\n        elif bano_score \u003e ban_score and bano_score \u003e ban2_score:\n            row[\"longitude\"] \u003d row[\"bano_longitude\"]\n            row[\"latitude\"] \u003d row[\"bano_latitude\"]\n            row[\"geo_source\"] \u003d \"bano + name\"\n            row[\"geo_type\"] \u003d row[\"bano_type\"]\n            row[\"geo_score\"] \u003d row[\"bano_score\"]\n        elif ban2_score \u003e ban_score and ban2_score \u003e bano_score:\n            row[\"longitude\"] \u003d row[\"ban2_longitude\"]\n            row[\"latitude\"] \u003d row[\"ban2_latitude\"]\n            row[\"geo_source\"] \u003d \"ban + name\"\n            row[\"geo_type\"] \u003d row[\"ban2_type\"]\n            row[\"geo_score\"] \u003d row[\"ban2_score\"]\n    return row\n",
        "usePythonUnicode": false
      },
      "alwaysShowComment": false
    },
    {
      "preview": false,
      "name": "Préparation Analyse",
      "metaType": "GROUP",
      "disabled": false,
      "steps": [
        {
          "preview": false,
          "metaType": "PROCESSOR",
          "disabled": false,
          "type": "DateComponentsExtractor",
          "params": {
            "outMonthColumn": "",
            "outHourColumn": "HEURE",
            "outYearColumn": "ANNEE",
            "column": "date",
            "outDayOfWeekColumn": "LIBELLE_JOUR",
            "timezone_id": "UTC",
            "outWeekOfYearColumn": "SEMAINE"
          },
          "alwaysShowComment": false
        },
        {
          "preview": false,
          "metaType": "PROCESSOR",
          "disabled": false,
          "type": "FindReplace",
          "params": {
            "output": "",
            "mapping": [
              {
                "from": "1",
                "to": "Lundi"
              },
              {
                "from": "2",
                "to": "Mardi"
              },
              {
                "from": "3",
                "to": "Mercredi"
              },
              {
                "from": "4",
                "to": "Jeudi"
              },
              {
                "from": "5",
                "to": "Vendredi"
              },
              {
                "from": "6",
                "to": "Samedi"
              },
              {
                "from": "7",
                "to": "Dimanche"
              }
            ],
            "normalization": "EXACT",
            "columns": [
              "LIBELLE_JOUR"
            ],
            "appliesTo": "SINGLE_COLUMN",
            "stopAfterFirstMatch": false,
            "matching": "SUBSTRING"
          },
          "alwaysShowComment": false
        }
      ],
      "alwaysShowComment": false
    },
    {
      "preview": false,
      "metaType": "PROCESSOR",
      "disabled": false,
      "type": "ColumnsSelector",
      "params": {
        "columns": [
          "baac_geopoint",
          "distance_baac_final",
          "bano_geopoint",
          "distance_ban_bano",
          "distance_baac_bano",
          "ban_geopoint",
          "distance_baac_ban",
          "ban2_geopoint",
          "ban_citycode",
          "ban_label",
          "ban_latitude",
          "ban_longitude",
          "ban_postcode",
          "ban_score",
          "ban_type",
          "bano_citycode",
          "bano_label",
          "bano_latitude",
          "bano_longitude",
          "bano_postcode",
          "bano_score",
          "bano_type",
          "ban2_citycode",
          "ban2_label",
          "ban2_latitude",
          "ban2_longitude",
          "ban2_score",
          "ban2_type",
          "long",
          "com",
          "lat",
          "gps",
          "hrmn",
          "jour",
          "an"
        ],
        "keep": false,
        "appliesTo": "COLUMNS"
      },
      "alwaysShowComment": false
    },
    {
      "preview": false,
      "metaType": "PROCESSOR",
      "disabled": false,
      "type": "DateFormatter",
      "params": {
        "inCol": "date",
        "outCol": "heures_minutes",
        "format": "HH:mm",
        "timezone_id": "UTC",
        "lang": "auto"
      },
      "alwaysShowComment": false
    },
    {
      "preview": false,
      "metaType": "PROCESSOR",
      "disabled": false,
      "type": "DateFormatter",
      "params": {
        "inCol": "date",
        "outCol": "date_formated",
        "format": "dd/MM/yyyy",
        "timezone_id": "UTC",
        "lang": "auto"
      },
      "alwaysShowComment": false
    },
    {
      "preview": false,
      "metaType": "PROCESSOR",
      "disabled": true,
      "comment": "Arrondissements Marseille",
      "type": "FindReplace",
      "params": {
        "output": "",
        "mapping": [
          {
            "from": "132[01][0-9]",
            "to": "13055"
          }
        ],
        "normalization": "EXACT",
        "columns": [
          "current_city_code"
        ],
        "appliesTo": "SINGLE_COLUMN",
        "stopAfterFirstMatch": false,
        "matching": "PATTERN"
      },
      "alwaysShowComment": false
    },
    {
      "preview": false,
      "metaType": "PROCESSOR",
      "disabled": true,
      "comment": "Arrondissements Lyon",
      "type": "FindReplace",
      "params": {
        "output": "",
        "mapping": [
          {
            "from": "6938[1-9]",
            "to": "69123"
          }
        ],
        "normalization": "EXACT",
        "columns": [
          "current_city_code"
        ],
        "appliesTo": "SINGLE_COLUMN",
        "stopAfterFirstMatch": false,
        "matching": "PATTERN"
      },
      "alwaysShowComment": false
    },
    {
      "preview": false,
      "metaType": "PROCESSOR",
      "disabled": true,
      "type": "GeoPointCreator",
      "params": {
        "out_column": "the_geom",
        "lat_column": "latitude",
        "lon_column": "longitude"
      },
      "alwaysShowComment": false
    },
    {
      "preview": false,
      "metaType": "PROCESSOR",
      "disabled": false,
      "type": "FindReplace",
      "params": {
        "output": "LIBELLE_PLAGE_HORAIRE",
        "mapping": [
          {
            "from": "0",
            "to": "00 - 01 h"
          },
          {
            "from": "1",
            "to": "01 - 02 h"
          },
          {
            "from": "2",
            "to": "02 - 03 h"
          },
          {
            "from": "3",
            "to": "03 - 04 h"
          },
          {
            "from": "4",
            "to": "04 - 05 h"
          },
          {
            "from": "5",
            "to": "05 - 06 h"
          },
          {
            "from": "6",
            "to": "06 - 07 h"
          },
          {
            "from": "7",
            "to": "07 - 08 h"
          },
          {
            "from": "8",
            "to": "08 - 09 h"
          },
          {
            "from": "9",
            "to": "09 - 10 h"
          },
          {
            "from": "10",
            "to": "10 - 11 h"
          },
          {
            "from": "11",
            "to": "11 - 12 h"
          },
          {
            "from": "12",
            "to": "12 - 13 h"
          },
          {
            "from": "13",
            "to": "13 - 14 h"
          },
          {
            "from": "14",
            "to": "14 - 15 h"
          },
          {
            "from": "15",
            "to": "15 - 16 h"
          },
          {
            "from": "16",
            "to": "16 - 17 h"
          },
          {
            "from": "17",
            "to": "17 - 18 h"
          },
          {
            "from": "18",
            "to": "18 - 19 h"
          },
          {
            "from": "19",
            "to": "19 - 20 h"
          },
          {
            "from": "20",
            "to": "20 - 21 h"
          },
          {
            "from": "21",
            "to": "21 - 22 h"
          },
          {
            "from": "22",
            "to": "22 - 23 h"
          },
          {
            "from": "23",
            "to": "23 - 24 h"
          }
        ],
        "normalization": "EXACT",
        "columns": [
          "HEURE"
        ],
        "appliesTo": "SINGLE_COLUMN",
        "stopAfterFirstMatch": false,
        "matching": "FULL_STRING"
      },
      "alwaysShowComment": false
    },
    {
      "preview": true,
      "metaType": "PROCESSOR",
      "disabled": false,
      "type": "FilterOnBadType",
      "params": {
        "booleanMode": "AND",
        "columns": [],
        "action": "CLEAR_CELL",
        "appliesTo": "PATTERN",
        "appliesToPattern": ".*postcode",
        "type": "LongMeaning"
      },
      "alwaysShowComment": false
    }
  ],
  "maxProcessedMemTableBytes": -1,
  "previewMode": "ALL_ROWS",
  "vizSampling": {
    "_refreshTrigger": 0,
    "autoRefreshSample": false
  },
  "analysisColumnData": {},
  "sorting": [],
  "globalSearchQuery": "",
  "coloring": {
    "scheme": "MEANING_AND_STATUS",
    "individualColumns": [],
    "valueColoringMode": "HASH"
  }
}