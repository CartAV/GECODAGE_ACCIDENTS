{
  "columnsSelection": {
    "mode": "ALL"
  },
  "explorationSampling": {
    "_refreshTrigger": 0,
    "selection": {
      "filter": {
        "distinct": false,
        "enabled": false
      },
      "latestPartitionsN": 1,
      "maxRecords": 10000,
      "ordering": {
        "rules": [],
        "enabled": false
      },
      "withinFirstN": -1,
      "partitionSelectionMethod": "ALL",
      "maxStoredBytes": -1,
      "targetRatio": 0.02,
      "maxReadUncompressedBytes": -1,
      "samplingMethod": "HEAD_SEQUENTIAL"
    },
    "autoRefreshSample": false
  },
  "explorationFilters": [],
  "origin": "PREPARE_RECIPE",
  "exploreUIParams": {
    "autoRefresh": true
  },
  "steps": [
    {
      "preview": true,
      "metaType": "PROCESSOR",
      "disabled": false,
      "type": "PythonUDF",
      "params": {
        "mode": "ROW",
        "stopOnError": true,
        "pythonSourceCode": "def process(row):\n    m \u003d row[\"pr1\"]\n    if m is None:\n        m \u003d 0\n    else:\n        m \u003d int(m)\n        \n    if (row[\"pr_lat_next1\"] is not None and row[\"pr_lon_next1\"] is not None and row[\"pr_lat\"] is not None and row[\"pr_lon\"] is not None):\n            # les coords de la borne et de la suivante sont etre dispos\n            row[\"pr_lat_i\"] \u003d (float(row[\"pr_lat\"]) * (1000 - m) + float(row[\"pr_lat_next1\"]) * m)/1000\n            row[\"pr_lon_i\"] \u003d (float(row[\"pr_lon\"]) * (1000 - m) + float(row[\"pr_lon_next1\"]) * m)/1000\n    \n    elif row[\"pr_lat\"] is not None and row[\"pr_lon\"] is not None:\n        # pas de borne suivante, on place l\u0027accident à la borne indiquée sans interpoler\n        row[\"pr_lat_i\"] \u003d row[\"pr_lat\"]\n        row[\"pr_lon_i\"] \u003d row[\"pr_lon\"]\n    return row\n",
        "usePythonUnicode": true
      },
      "alwaysShowComment": false
    }
  ],
  "maxProcessedMemTableBytes": -1,
  "previewMode": "ALL_ROWS",
  "vizSampling": {
    "_refreshTrigger": 0,
    "autoRefreshSample": false
  },
  "analysisColumnData": {},
  "sorting": [],
  "globalSearchQuery": "",
  "coloring": {
    "scheme": "MEANING_AND_STATUS",
    "individualColumns": [],
    "valueColoringMode": "HASH"
  }
}