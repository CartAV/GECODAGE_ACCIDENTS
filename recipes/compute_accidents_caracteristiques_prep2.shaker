{
  "columnsSelection": {
    "mode": "ALL"
  },
  "explorationSampling": {
    "_refreshTrigger": 0,
    "selection": {
      "filter": {
        "distinct": false,
        "enabled": false
      },
      "latestPartitionsN": 1,
      "maxRecords": 10000,
      "ordering": {
        "rules": [],
        "enabled": false
      },
      "withinFirstN": -1,
      "partitionSelectionMethod": "ALL",
      "maxStoredBytes": -1,
      "targetRatio": 0.02,
      "maxReadUncompressedBytes": -1,
      "samplingMethod": "HEAD_SEQUENTIAL"
    },
    "autoRefreshSample": false
  },
  "explorationFilters": [
    {
      "$$hashKey": "1NB",
      "type": "global_search"
    }
  ],
  "origin": "PREPARE_RECIPE",
  "exploreUIParams": {
    "autoRefresh": true
  },
  "steps": [
    {
      "preview": false,
      "name": "Nettoyage coordonn√©es",
      "metaType": "GROUP",
      "disabled": false,
      "steps": [
        {
          "preview": false,
          "metaType": "PROCESSOR",
          "disabled": false,
          "type": "FilterOnBadType",
          "params": {
            "booleanMode": "AND",
            "columns": [
              "lat"
            ],
            "action": "CLEAR_CELL",
            "appliesTo": "SINGLE_COLUMN",
            "type": "LongMeaning"
          },
          "alwaysShowComment": false
        },
        {
          "preview": false,
          "metaType": "PROCESSOR",
          "disabled": false,
          "type": "FilterOnBadType",
          "params": {
            "booleanMode": "AND",
            "columns": [
              "long"
            ],
            "action": "CLEAR_CELL",
            "appliesTo": "SINGLE_COLUMN",
            "type": "LongMeaning"
          },
          "alwaysShowComment": false
        },
        {
          "preview": false,
          "metaType": "PROCESSOR",
          "disabled": false,
          "type": "PythonUDF",
          "params": {
            "mode": "ROW",
            "stopOnError": true,
            "pythonSourceCode": "def invalid_coordinates(lon, lat):\n    if lon and lat:\n        lon \u003d int(lon)\n        lat \u003d int(lat)\n        return (abs(lat) \u003c 10 or abs(lon) \u003c 10 or\n                (lat % 1000 \u003d\u003d 0 and lon % 1000 \u003d\u003d 0))\n    else:\n        return True\n\ndef process(row):\n    if invalid_coordinates(row[\"long\"], row[\"lat\"]):\n        row[\"long\"] \u003d None\n        row[\"lat\"] \u003d None\n    return row\n",
            "usePythonUnicode": true
          },
          "alwaysShowComment": false
        },
        {
          "preview": false,
          "metaType": "PROCESSOR",
          "disabled": false,
          "type": "CreateColumnWithGREL",
          "params": {
            "expression": "lat / 100000",
            "column": "lat"
          },
          "alwaysShowComment": false
        },
        {
          "preview": false,
          "metaType": "PROCESSOR",
          "disabled": false,
          "type": "CreateColumnWithGREL",
          "params": {
            "expression": "long / 100000",
            "column": "long"
          },
          "alwaysShowComment": false
        },
        {
          "preview": false,
          "metaType": "PROCESSOR",
          "disabled": false,
          "type": "PythonUDF",
          "params": {
            "mode": "CELL",
            "stopOnError": true,
            "pythonSourceCode": "def process(row):\n    if row[\u0027long\u0027]:\n        lng \u003d float(row[\u0027long\u0027])\n        if row[\u0027gps\u0027] in [\u0027G\u0027, \u0027A\u0027] or row[\u0027dep\u0027] in [\u002744\u0027, \u002729\u0027, \u002722\u0027, \u002756\u0027, \u002735\u0027, \u002750\u0027, \u002785\u0027, \u002717\u0027, \u002733\u0027, \u002740\u0027, \u002764\u0027, \u002753\u0027]:\n            lng \u003d -1 * abs(lng)\n        return lng\n    else:\n        return None\n",
            "column": "long",
            "usePythonUnicode": true
          },
          "alwaysShowComment": false
        },
        {
          "preview": false,
          "metaType": "PROCESSOR",
          "disabled": false,
          "type": "PythonUDF",
          "params": {
            "mode": "CELL",
            "stopOnError": true,
            "pythonSourceCode": "def process(row):\n    if row[\u0027lat\u0027]:\n        lat \u003d float(row[\u0027lat\u0027])\n        if row[\u0027gps\u0027] in [\u0027Y\u0027, \u0027R\u0027]:\n            lat \u003d -1 * abs(lat)\n        return lat\n    else:\n        return None\n",
            "column": "lat",
            "usePythonUnicode": true
          },
          "alwaysShowComment": false
        }
      ],
      "alwaysShowComment": false
    },
    {
      "preview": false,
      "name": "Parser les dates",
      "metaType": "GROUP",
      "disabled": false,
      "steps": [
        {
          "preview": false,
          "metaType": "PROCESSOR",
          "disabled": false,
          "type": "PythonUDF",
          "params": {
            "mode": "CELL",
            "stopOnError": true,
            "pythonSourceCode": "def process(row):\n    return \"20{:02d}{:02d}{:02d}{:04d}\".format(\n            int(row[\u0027an\u0027]), int(row[\u0027mois\u0027]), int(row[\u0027jour\u0027]), int(row[\u0027hrmn\u0027]))\n    \n",
            "column": "date",
            "usePythonUnicode": true
          },
          "alwaysShowComment": false
        },
        {
          "preview": false,
          "metaType": "PROCESSOR",
          "disabled": false,
          "type": "DateParser",
          "params": {
            "outCol": "",
            "formats": [
              "yyyyMMddHHmm"
            ],
            "columns": [
              "date"
            ],
            "timezone_id": "UTC",
            "appliesTo": "SINGLE_COLUMN",
            "lang": "auto"
          },
          "alwaysShowComment": false
        }
      ],
      "alwaysShowComment": false
    },
    {
      "preview": false,
      "name": "Codes INSEE",
      "metaType": "GROUP",
      "disabled": false,
      "steps": [
        {
          "preview": false,
          "metaType": "PROCESSOR",
          "disabled": false,
          "type": "FindReplace",
          "params": {
            "output": "",
            "mapping": [
              {
                "from": "",
                "to": "000"
              }
            ],
            "normalization": "EXACT",
            "columns": [
              "com"
            ],
            "appliesTo": "SINGLE_COLUMN",
            "stopAfterFirstMatch": false,
            "matching": "SUBSTRING"
          },
          "alwaysShowComment": false
        },
        {
          "preview": false,
          "metaType": "PROCESSOR",
          "disabled": false,
          "type": "FindReplace",
          "params": {
            "output": "",
            "mapping": [
              {
                "from": "201",
                "to": "2A"
              },
              {
                "from": "202",
                "to": "2B"
              },
              {
                "from": "",
                "to": "000"
              }
            ],
            "normalization": "EXACT",
            "columns": [
              "dep"
            ],
            "appliesTo": "SINGLE_COLUMN",
            "stopAfterFirstMatch": false,
            "matching": "FULL_STRING"
          },
          "alwaysShowComment": false
        },
        {
          "preview": false,
          "metaType": "PROCESSOR",
          "disabled": false,
          "type": "PythonUDF",
          "params": {
            "mode": "CELL",
            "stopOnError": true,
            "pythonSourceCode": "def process(row):\n    departement \u003d row[\"dep\"]\n    commune \u003d row[\"com\"]\n    if departement[0:2] in [\u002797\u0027, \u002798\u0027]:\n        commune \u003d commune[1:3]\n    elif departement[0:2] \u003d\u003d \u002775\u0027 and commune !\u003d \u0027056\u0027:\n        departement \u003d \u0027751\u0027\n        commune \u003d commune[1:3]\n    else:\n        departement \u003d departement[0:2]\n\n    return departement + commune\n ",
            "column": "original_city_code",
            "usePythonUnicode": true
          },
          "alwaysShowComment": false
        },
        {
          "preview": false,
          "metaType": "PROCESSOR",
          "disabled": false,
          "type": "PythonUDF",
          "params": {
            "mode": "CELL",
            "stopOnError": true,
            "pythonSourceCode": "def process(row):\n    if row[\"dep\"][0:2] \u003d\u003d \u002797\u0027:\n        return row[\"dep\"]\n    else:\n        return row[\"dep\"][0:2]\n",
            "column": "dep",
            "usePythonUnicode": true
          },
          "alwaysShowComment": false
        }
      ],
      "alwaysShowComment": false
    }
  ],
  "maxProcessedMemTableBytes": -1,
  "previewMode": "ALL_ROWS",
  "vizSampling": {
    "_refreshTrigger": 0,
    "autoRefreshSample": false
  },
  "analysisColumnData": {},
  "sorting": [],
  "globalSearchQuery": "",
  "coloring": {
    "scheme": "MEANING_AND_STATUS",
    "individualColumns": [],
    "valueColoringMode": "HASH"
  }
}