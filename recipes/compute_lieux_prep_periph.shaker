{
  "columnsSelection": {
    "mode": "ALL"
  },
  "explorationSampling": {
    "_refreshTrigger": 4,
    "selection": {
      "filter": {
        "uiData": {
          "mode": "\u0026\u0026",
          "conditions": [
            {
              "input": "dep",
              "col": "catr",
              "string": "75",
              "num": 0.0,
              "operator": "\u003d\u003d [string]"
            }
          ]
        },
        "distinct": false,
        "enabled": true
      },
      "latestPartitionsN": 1,
      "maxRecords": 10000,
      "ordering": {
        "rules": [],
        "enabled": false
      },
      "withinFirstN": -1,
      "partitionSelectionMethod": "ALL",
      "maxStoredBytes": -1,
      "targetRatio": 0.02,
      "maxReadUncompressedBytes": -1,
      "samplingMethod": "HEAD_SEQUENTIAL"
    },
    "autoRefreshSample": false
  },
  "explorationFilters": [],
  "origin": "PREPARE_RECIPE",
  "exploreUIParams": {
    "autoRefresh": true
  },
  "steps": [
    {
      "preview": true,
      "metaType": "PROCESSOR",
      "disabled": false,
      "comment": "regex pour le periph parisien",
      "type": "PythonUDF",
      "params": {
        "mode": "ROW",
        "stopOnError": true,
        "pythonSourceCode": "import re\n\ndef process(row):\n    \n    if row[\u0027dep\u0027] \u003d\u003d \"75\":\n        match \u003d re.search(r\u0027(PERIPH|BP[IE])\u0027, row[\u0027adr\u0027], re.IGNORECASE)\n        if match:\n            row[\u0027voie_normalise\u0027] \u003d \u0027Boulevard Périphérique\u0027\n            row[\u0027catr\u0027] \u003d \u0027Boulevard Périphérique\u0027\n        if row[\"pr\"]:\n            # les années plus anciennes, l\u0027adresse était souvent rentrée sous forme \"PORTE DE ...\"\n            match \u003d re.search(r\u0027(PORTE)\u0027, row[\u0027adr\u0027], re.IGNORECASE)\n            if match:\n                row[\u0027voie_normalise\u0027] \u003d \u0027Boulevard Périphérique\u0027\n                row[\u0027catr\u0027] \u003d \u0027Boulevard Périphérique\u0027\n    return row\n",
        "column": "test",
        "usePythonUnicode": true
      },
      "alwaysShowComment": true
    }
  ],
  "maxProcessedMemTableBytes": -1,
  "previewMode": "IMPACTED_ONLY",
  "vizSampling": {
    "_refreshTrigger": 0,
    "autoRefreshSample": false
  },
  "analysisColumnData": {},
  "sorting": [],
  "globalSearchQuery": "",
  "coloring": {
    "scheme": "MEANING_AND_STATUS",
    "individualColumns": [],
    "valueColoringMode": "HASH"
  }
}